#JS
##命名规范
* 变量命名：小驼峰式命名方法，首字母小写（类型+对象描述）
* 函数命名：小驼峰方式 ( 构造函数使用大驼峰命名法 ) 
* 常量命名：全部大写 ( 使用大写字母和下划线来组合命名，下划线用以分割单词 ) 
* 类的成员命名：
  *  公共属性和方法 : 同变量命名方式
  *  私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式

##注释规范
* 单行注释( // )
  * 单独一行：//(双斜线)与注释文字之间保留一个空格
  * 在代码后面添加注释：//(双斜线)与代码之间保留一个空格。
    ```javascript
    // 调用了一个函数；1)单独在一行
    setTitle();
    var maxCount = 10; // 设置最大量；2)在代码后面注释
    // setName(); // 3)注释代码
    ```

* 多行注释 ( /* 注释说明 */ )
  * 若开始(/*和结束(*/)都在一行，推荐采用单行注释
  * 若至少三行注释时，第一行为/*，最后行为*/，其他行以*开始，并且注释文字与*保留一个空格。 
  ```javascript
  /*
  * 代码执行到这里后会调用setTitle()函数
  * setTitle()：设置title的值
  */
  setTitle();
  ```

* 函数 ( 方法 ) 注释
  * 多行注释的一种，包含特殊的注释要求
  ```javascript
  /**
  * 函数说明
  * @param 描述参数的信息
  * @return  描述返回值的信息
  * @author  描述此函数作者的信息
  * @version  描述此函数的版本号
  * @example  示例代码
  */
  ```

##其他规范
*  使用soft tab（4个空格）
*  最外层统一使用单引号
*  单行长度不要超过80，但如果编辑器开启word wrap可以不考虑单行长度
*  每句代码后（必须）加";"
*  空格的使用
   *  ()中的判断条件前后都(必须)加空格
   *  ()里的判断前后(禁止)加空格，如：正确的写法: if (isOk)；不推荐的写法: if ( isOk )
   ```javascript
     //正确的写法
      if (isOk) {
          console.log("ok");
      }

      //不推荐的写法
      if(isOk){
          console.log("ok");
      }
   ```
   *  switch中的空格
   ```javascript
     //正确的写法
       switch(name) {
           case "hotel":
               console.log(name);
               break;

           case "moive":
               console.log(name);
               break;

           default:
               // code
       }

       //不推荐的写法
       switch (name) {                     // switch 后不应该有空格, 正确的写法: switch(name) { // code
           case "hotel":
               console.log(name);
           break;                          // break; 应该和console.log对齐
           case "movie":                   // 每个case之前需要有换行
               console.log(name);
           break;                          // break; 应该和console.log对齐

           default:
               // code
       }
   ```

   *  for中的空格
   ```javascript
        // 正确的写法
          for (i=0, len=names.length; i < len; i++) {
              // code
          }

          // 不推荐的写法
          for(i = 0, len = names.length;i < len;i++) {          // for后应该有空格，每个`;`号后需要有空格，变量的赋值不应该有空格
              // code
          }
   ```

   * function 中的空格
   ```javascript
      // 正确的写法
      function call(name) {

      }

      var cell = function () {

      };

      // 不推荐的写法
      var call = function(name){
          // code
      }
   ```

   * var 中空格及定义
     * 声明变量 = 前后（必须）添加空格
     * 每个变量的赋值声明以,结束后（必须）换行进行下一个变量赋值声明
     * 将所有不需要进行赋值的变量声明放置最后一行，且变量之间不需要换行
     * 当一组变量声明完成后，空一行后编写其余代码
   ```javascript
   // 一个推荐的var写法组
     function(res) {
         var code = 1 + 1,
             json = JSON.parse(res),
             type, html;

         // code
     }
   ```
* 在同一个函数内部，局部变量的声明必须置于顶端
* 块内函数必须用局部变量声明
```javascript
   // 错误的写法
    var call = function(name) {
        if (name == "hotel") {
            function foo() {
                console.log("hotel foo");
            }
        }

        foo && foo();
    }

    // 推荐的写法
    var call = function(name) {
        var foo;

        if (name == "hotel") {
            foo = function() {
                console.log("hotel foo");
            }
        }

        foo && foo();
    }
```

* 数组、对象
  * 对象属性名不需要加引号
  * 对象以缩进的形式书写，不要写在一行
  * 数组、对象最后不要有逗号
```javascript
// not good
var a = {
    'b': 1
};

var a = {b: 1};

var a = {
    b: 1,
    c: 2,
};

// good
var a = {
    b: 1,
    c: 2
};
```

* undefined
  * 永远不要直接使用undefined进行变量判断
  * 使用typeof和字符串'undefined'对变量进行判断
  ```javascript
     // not good
     if (person === undefined) {
         //code
     }
     
     // good
     if (typeof person === 'undefined') {
        //code
     }
  ```

* jshint
  * 用'===', '!=='代替'==', '!='
  * for-in里一定要有hasOwnProperty的判断
  * 不要在内置对象的原型上添加方法，如Array, Date
  * 不要在内层作用域的代码里声明了变量，之后却访问到了外层作用域的同名变量
  * 变量不要先使用后声明
  * 不要在一句代码中单单使用构造函数，记得将其赋值给某个变量
  * 不要在同个作用域下声明同名变量
  * 不要在一些不需要的地方加括号，例：delete(a.b)
  * 不要使用未声明的变量（全局变量需要加到.jshintrc文件的globals属性里面）
  * 不要声明了变量却不使用
  * 不要在应该做比较的地方做赋值；
  * debugger不要出现在提交的代码里；
  * 数组中不要存在空元素；
  * 不要在循环内部声明函数；
  * 不要像这样使用构造函数，例：new function () { ... }, new Object；
```javascript
    // not good
    if (a == 1) {
        a++;
    }
    
    // good
    if (a === 1) {
        a++;
    }
    
    // good
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
            // be sure that obj[key] belongs to the object and was not inherited
            console.log(obj[key]);
        }
    }
    
    // not good
    Array.prototype.count = function(value) {
        return 4;
    };
    
    // not good
    var x = 1;
    
    function test() {
        if (true) {
            var x = 0;
        }
    
        x += 1;
    }
    
    // not good
    function test() {
        console.log(x);
    
        var x = 1;
    }
    
    // not good
    new Person();
    
    // good
    var person = new Person();
    
    // not good
    delete(obj.attr);
    
    // good
    delete obj.attr;
    
    // not good
    if (a = 10) {
        a++;
    }
    
    // not good
    var a = [1, , , 2, 3];
    
    // not good
    var nums = [];
    
    for (var i = 0; i < 10; i++) {
        (function(i) {
            nums[i] = function(j) {
                return i + j;
            };
        }(i));
    }
    
    // not good
    var singleton = new function() {
        var privateVar;
    
        this.publicMethod = function() {
            privateVar = 1;
        };
    
        this.publicMethod2 = function() {
            privateVar = 2;
        };
    };
```

* 杂项
  * 不要混用tab和space；
  * 不要在一处使用多个tab或space
  * 对上下文this的引用只能使用'_this', 'that', 'self'其中一个来命名；
  * 行尾不要有空白字符；
  * switch的falling through和no default的情况一定要有注释特别说明；
  * 不允许有空的代码块。
```javascript
    // not good
    var a   = 1;
    
    function Person() {
        // not good
        var me = this;
    
        // good
        var _this = this;
    
        // good
        var that = this;
    
        // good
        var self = this;
    }
    
    // good
    switch (condition) {
        case 1:
        case 2:
            //code
            break;
        case 3:
            //code
        // why fall through
        case 4:
            //code
            break;
        // why no default
    }
    
    // not good with empty block
    if (condition) {
    
    }
```